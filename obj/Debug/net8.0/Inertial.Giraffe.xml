<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Inertial.Giraffe</name></assembly>
<members>
<member name="M:Inertial.Giraffe.Types.HttpRequest.get_IsInertia(Microsoft.AspNetCore.Http.HttpRequest)">
<summary>
 Check whether this request was initiated from Inertia
</summary>
</member>
<member name="M:Inertial.Giraffe.Types.IHeaderDictionary.get_TryGetReferer(Microsoft.AspNetCore.Http.IHeaderDictionary)">
<summary>
 Get the referer
</summary>
</member>
<member name="M:Inertial.Giraffe.Types.IHeaderDictionary.get_XSRFToken(Microsoft.AspNetCore.Http.IHeaderDictionary)">
<summary>
 Get the token from request set by axios when XSRF-COOKIE is present
</summary>
</member>
<member name="M:Inertial.Giraffe.Types.IHeaderDictionary.get_InertiaPartialComponent(Microsoft.AspNetCore.Http.IHeaderDictionary)">
<summary>
 Inertia Partial Component
</summary>
</member>
<member name="M:Inertial.Giraffe.Types.IHeaderDictionary.get_InertiaId(Microsoft.AspNetCore.Http.IHeaderDictionary)">
<summary>
 Inertia Id from client
</summary>
</member>
<member name="M:Inertial.Giraffe.Types.IHeaderDictionary.get_InertiaPartialData(Microsoft.AspNetCore.Http.IHeaderDictionary)">
<summary>
 Inertia Partial Data
</summary>
</member>
<member name="M:Inertial.Giraffe.Types.IHeaderDictionary.get_InertiaLocation(Microsoft.AspNetCore.Http.IHeaderDictionary)">
<summary>
 Inertia Location
</summary>
</member>
<member name="M:Inertial.Giraffe.Types.IHeaderDictionary.get_InertiaVersion(Microsoft.AspNetCore.Http.IHeaderDictionary)">
<summary>
 Inertia Version
</summary>
</member>
<member name="M:Inertial.Giraffe.Types.IHeaderDictionary.get_Inertia(Microsoft.AspNetCore.Http.IHeaderDictionary)">
<summary>
 Inertia Request
</summary>
</member>
<member name="M:Inertial.Giraffe.Types.hdr(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String)">
<summary>
 Determine if the given header is present
</summary>
</member>
<member name="M:Inertial.Giraffe.Core.ServiceCollectionExtensions.AddInertia``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,Microsoft.FSharp.Core.FSharpFunc{``0,System.String},Microsoft.FSharp.Core.FSharpFunc{Microsoft.AspNetCore.Http.HttpContext,System.Threading.Tasks.Task{``1}},``2)">
 <summary>
 Adds to the ASP.NET Core service container a default Inertia service and a custom JSON serializer that is compatible with the client-side inertial router
 Requires the following:
 1.) Values specifying the public path of the js folder (jsPath) and css folder (cssPath)
 2.) A Props union type wrapping each individual page record type
 3.) A resolver function that maps the current Props value to a string name
 4.) A share function that takes the HTTPContext and returns a Shared data record wrapped as a Task
 5.) An initial SSE message
 </summary>
 <returns>Returns an <see cref="Microsoft.Extensions.DependencyInjection.IServiceCollection"/> builder object.</returns>
</member>
<member name="M:Inertial.Giraffe.Core.InertiaResponse`3.UpdateShared(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{`1,`1}})">
<summary>
 Pass in arbitrary function with signature &apos;Shared -&gt; &apos;Shared that can alter the &apos;Shared data in this resonse only
</summary>
</member>
<member name="M:Inertial.Giraffe.Core.InertiaResponse`3.SetReloadOnMount(Microsoft.FSharp.Core.FSharpOption{Inertial.Giraffe.Core.PropsToEval})">
<summary>
 Indicate that this component should trigger the client side router to perform a partial data reload of itself after it first loads, evaluating all the fields in the Prop record type (including functions) OR just those fieldnames specified in toGet.
 This is the main mechanism used to achieve asynchronous data loading on the server.  Props that have an Async function type signature don&apos;t get evaluated on first load, but do get evaluated when the component reloads.
</summary>
</member>
<member name="M:Inertial.Giraffe.Core.InertiaResponse`3.Render(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Public rendering function that calls HttpHandler compatible with Giraffe pipeline
</summary>
</member>
<member name="M:Inertial.Giraffe.Core.InertiaResponse`3.DisableRealtime">
<summary>
 Components listen for server-sent events at &quot;/sse&quot; by default; Calling this indicates that this component should not listen client-side.
</summary>
</member>
<member name="M:Inertial.Giraffe.Core.Inertia`3.SetVersion(System.String)">
<summary>
 Set version
</summary>
</member>
<member name="M:Inertial.Giraffe.Core.Inertia`3.Location(System.String)">
<summary>
 Location method will force a client-side redirect to the url specified
</summary>
</member>
<member name="M:Inertial.Giraffe.Core.Inertia`3.GetVersion">
<summary>
 Get version information
</summary>
</member>
<member name="M:Inertial.Giraffe.Core.Inertia`3.Component(`0,Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Define component with &apos;Props value and optional page title (defaults to component name if not specified)
</summary>
</member>
<member name="T:Inertial.Giraffe.Core.Inertia`3">
 <summary>
 Inertia Singleton Base Class
 </summary>
 <returns>Inertia object</returns>
</member>
<member name="T:Inertial.Giraffe.Core.InertiaOptions">
 <summary>
 Inertia Options Class
 </summary>
 <returns>Inertia Options with default settings</returns>
</member>
<member name="M:Inertial.Giraffe.Core.InertialSSEEvent.create(Microsoft.AspNetCore.Http.HttpContext,System.String,Inertial.Giraffe.Core.PropsToEval,Microsoft.FSharp.Collections.FSharpList{Inertial.Giraffe.Core.RealTimePredicates})">
<summary>
 Create a new SSE event that is sent to client as json for decoding
</summary>
</member>
</members>
</doc>
